#!/bin/sh

PREREQ=""
prereqs()
{
	echo "$PREREQ"
}
case $1 in
# get pre-requisites
prereqs)
	prereqs
	exit 0
	;;
esac


# The options part of the kernel "video=" argument (i.e. everyting
# after "video=<fbdriver>:") has very inconsistent rules.
#
# Generally the following applies:
# 1) options are comma-separated
# 2) options can be in either of these three forms:
#    <arg>=<value>, <arg>:<value>, <boolean-arg>.
# 3) the "mode" option has the form <xres>x<yres>[M][R][-<bpp>][@<refresh>][i][m]
#    and may or may not start with "mode="
#
# When the options are used with modules, they need to be space-separated
# and the following conversions are needed:
#	<arg>:<value> -> <arg>=<value>
#	<boolean-arg> -> <boolean-arg>=1
#	<modevalue>   -> mode=<modevalue>
parse_video_opts()
{
	local OPTS="$1"
	local IFS=","

	# Must be a line like video=<fbdriver>:<opt1>,[opt2]...
	if [ "${OPTS}" = "${OPTS%%:*}" ]; then
		return
	fi
	OPTS="${OPTS#*:}"
	for opt in ${OPTS}; do
		# Already in the "<arg>=<value>" form
		if [ "${opt}" != "${opt#*=}" ]; then
			echo -n "$opt "
		# In the "<arg>:<value>" form
		elif [ "${opt}" != "${opt#*:}" ]; then
			echo -n "${opt%:*}=${opt#*:} "
		# Presumably a modevalue without the "mode=" prefix
		elif [ "${opt}" != "${opt#[0-9]*x[0-9]}" ]; then
			echo -n "mode=$opt "
		# Presumably a boolean
		else
			echo -n "${opt}=1 "
		fi
	done
}

FB=""
OPTS=""

for x in $(cat /proc/cmdline); do
	case ${x} in
	vga=*)
		FB="vesafb";
		OPTS="";
		;;
	video=*)
		FB=${x#*=}
		FB="${FB%%:*}"
		OPTS="$(parse_video_opts "${x}")"
	esac
done

# Map command line name to module name
case ${FB} in
matroxfb)
	FB=matroxfb_base
	;;
uvesafb)
	mknod -m 640 /dev/mem c 1 1
	mknod -m 666 /dev/zero c 1 5
	;;
mxcfb)
	# temporary workaround for (LP: #420555) until mxcfb is fixed
	if ! $(grep -qv ^# /etc/usplash.conf) && \
		[ -e /sys/class/graphics/fb0/virtual_size ];then
		res=$(cat /sys/class/graphics/fb0/virtual_size)
		echo "xres=${res%,*}" >>/etc/usplash.conf
		echo "yres=${res#*,}" >>/etc/usplash.conf
	fi
	;;
*)
	# Try kernel modesetting drivers; they'll fail if they can't bind.
	# Right now, we only try intel_agp, but we really ought to try the
	# others as well. Scott points out that if this is done for NVIDIA
	# then we need to take care to load the non-free one as appropriate,
	# since once you load the free AGP module you can't unload it in
	# order to use the non-free X driver ...
	if modprobe -q intel_agp && modprobe -q i915; then
		FB=kms
	fi
	;;
esac

if [ -n "${FB}" ]; then
	unset MODPROBE_OPTIONS
	modprobe -q fbcon
	if [ "${FB}" != kms ]; then
		modprobe -q ${FB} ${OPTS}
	fi
fi

if [ -e /proc/fb ]; then
	while read fbno desc; do
		if [ $(($fbno < 32)) ]; then
			mknod /dev/fb${fbno} c 29 ${fbno}
		fi
	done < /proc/fb
else
	mknod /dev/fb0 c 29 0
fi
